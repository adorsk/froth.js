// Generated by CoffeeScript 1.3.3
(function() {
  var Froth, JsonCss, Stylesheet, oldFroth, root,
    __hasProp = {}.hasOwnProperty,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  root = this;

  oldFroth = root.Froth;

  Froth = {};

  if (typeof exports !== 'undefined') {
    Froth = exports;
  } else {
    Froth = root.Froth = {};
  }

  Froth.noConflict = function() {
    root.Froth = oldFroth;
    return this;
  };

  /*
  Froth.JSONCSS
  */


  JsonCss = Froth.JsonCss = {};

  JsonCss.traverse = function(tree, getChildrenFn, visitFn, log) {
    var childNodeObj, childNodeObjs, nodeObj, nodeObjs, _i, _len;
    if (log == null) {
      log = {};
    }
    nodeObj = {
      ancestors: [],
      nodeId: null,
      data: tree
    };
    nodeObjs = getChildrenFn(nodeObj);
    while (nodeObjs.length) {
      nodeObj = nodeObjs.shift();
      childNodeObjs = getChildrenFn(nodeObj);
      for (_i = 0, _len = childNodeObjs.length; _i < _len; _i++) {
        childNodeObj = childNodeObjs[_i];
        nodeObjs.push(childNodeObj);
      }
      visitFn(nodeObj, log);
    }
    return log;
  };

  JsonCss.getChildren = function(nodeObj) {
    var childNodeObjs, k, v, _ref;
    childNodeObjs = [];
    _ref = nodeObj.data;
    for (k in _ref) {
      if (!__hasProp.call(_ref, k)) continue;
      v = _ref[k];
      if (typeof v === 'object') {
        childNodeObjs.push({
          ancestors: nodeObj.ancestors.concat([nodeObj]),
          nodeId: k,
          data: v
        });
      }
    }
    return childNodeObjs;
  };

  JsonCss.visit = function(nodeObj, log) {
    var ancestor, hasStyles, k, nodeCssStr, selector, selectorIds, styleAttrs, v, _i, _len, _ref, _ref1;
    selectorIds = [];
    _ref = nodeObj.ancestors.slice(1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ancestor = _ref[_i];
      selectorIds.push(ancestor.nodeId);
    }
    selectorIds.push(nodeObj.nodeId);
    selector = selectorIds.join(' ');
    selector = selector.replace(' &', '');
    styleAttrs = {};
    hasStyles = false;
    _ref1 = nodeObj.data;
    for (k in _ref1) {
      v = _ref1[k];
      if (typeof v !== 'object') {
        styleAttrs[k] = v;
        hasStyles = true;
      }
    }
    if (hasStyles) {
      nodeCssStr = JsonCss.formatCssRule(selector, styleAttrs);
      return log.cssStr += nodeCssStr;
    }
  };

  JsonCss.formatCssRule = function(selector, styleAttrs, opts) {
    var attrStr, cssStr, k, v, _ref, _ref1;
    if (opts == null) {
      opts = {};
    }
    if ((_ref = opts.indent) == null) {
      opts.indent = '  ';
    }
    if ((_ref1 = opts.linebreak) == null) {
      opts.linebreak = '\n';
    }
    cssStr = "";
    cssStr += selector + " {" + opts.linebreak;
    for (k in styleAttrs) {
      v = styleAttrs[k];
      attrStr = opts.indent + k + ": " + v + opts.linebreak;
      cssStr += attrStr;
    }
    cssStr += "}" + opts.linebreak;
    return cssStr;
  };

  JsonCss.formatCssImport = function(import_, opts) {
    if (opts == null) {
      opts = {};
    }
    opts.linebreak = opts.linebreak || '\n';
    return "@import url('" + import_ + "');" + opts.linebreak;
  };

  JsonCss.dumpcss = function(jsonCss) {
    var cssStr, import_, rulesStr, traversalLog, _i, _len, _ref;
    cssStr = '';
    if (jsonCss.imports) {
      _ref = jsonCss.imports;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        import_ = _ref[_i];
        cssStr += formatCssImport(import_);
      }
    }
    if (jsonCss.rules) {
      traversalLog = {
        'cssStr': ''
      };
      rulesStr = JsonCss.traverse(jsonCss.rules, JsonCss.getChildren, JsonCss.visit, traversalLog);
      cssStr += traversalLog.cssStr;
    }
    return cssStr;
  };

  /*
  Froth.Stylesheet
  */


  Froth.Stylesheet = Stylesheet = (function() {

    function Stylesheet(id, rules) {
      if (rules == null) {
        rules = {};
      }
      this.toCss = __bind(this.toCss, this);

      this.id = id;
      this.rules = rules;
    }

    Stylesheet.prototype.toCss = function() {
      return Froth.JsonCss.dumpcss(this);
    };

    return Stylesheet;

  })();

  Froth.defaultStylesheetId = '_froth';

  Froth.stylesheets = {};

  Froth.stylesheets[Froth.defaultStylesheetId] = new Froth.Stylesheet(Froth.defaultStylesheetId);

  /*
  Misc. Helpers
  @TODO: refactor & organize.
  */


  Froth.normalizeSelector = function(selector) {
    var classes, ids, match, normalized_tokens, ordered_subtokens, others, re, subtoken, token, token_re, tokens, _i, _len;
    re = /\s*([^\s\>]+|\>)\s*/g;
    tokens = [];
    while (match = re.exec(selector)) {
      tokens.push(match[1]);
    }
    normalized_tokens = [];
    token_re = /((\.|\#)?[^\.\#]+)/g;
    for (_i = 0, _len = tokens.length; _i < _len; _i++) {
      token = tokens[_i];
      ids = [];
      classes = [];
      others = [];
      while (match = token_re.exec(token)) {
        subtoken = match[1];
        if (subtoken[0] === '#') {
          ids.push(subtoken);
        } else if (subtoken[0] === '.') {
          classes.push(subtoken);
        } else {
          others.push(subtoken);
        }
      }
      ordered_subtokens = others.sort().concat(ids.sort()).concat(classes.sort());
      normalized_tokens.push(ordered_subtokens.join(''));
    }
    return normalized_tokens.join(' ');
  };

  Froth.df_walk = function(tree, getChildNodesFn, visitFn, log) {
    var childNode, childNodes, node, nodes, rootNode, _i, _len;
    if (log == null) {
      log = {};
    }
    rootNode = {
      ancestors: [],
      nodeId: null,
      data: tree
    };
    nodes = getChildNodesFn(rootNode);
    while (nodes.length) {
      node = nodes.shift();
      childNodes = getChildNodesFn(node);
      for (_i = 0, _len = childNodes.length; _i < _len; _i++) {
        childNode = childNodes[_i];
        nodes.push(childNode);
      }
      visitFn(node, log);
    }
    return log;
  };

  Froth.frothJsonToJsonCss = function(frothJson) {
    var getChildNodes, log, visitNode;
    if (frothJson == null) {
      frothJson = {};
    }
    getChildNodes = function(node) {
      var childNodes, k, v, _ref;
      childNodes = [];
      _ref = node.data;
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        v = _ref[k];
        if (typeof v === 'object') {
          childNodes.push({
            ancestors: node.ancestors.concat([node]),
            nodeId: k,
            data: v
          });
        }
      }
      return childNodes;
    };
    visitNode = function(node, log) {
      var ancestor, hasStyles, k, selector, selectorIds, styleAttrs, v, _base, _i, _len, _ref, _ref1, _ref2;
      selectorIds = [];
      _ref = node.ancestors.slice(1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ancestor = _ref[_i];
        selectorIds.push(ancestor.nodeId);
      }
      selectorIds.push(node.nodeId);
      selector = selectorIds.join(' ');
      selector = selector.replace(' &', '');
      selector = Froth.normalizeSelector(selector);
      styleAttrs = {};
      hasStyles = false;
      _ref1 = node.data;
      for (k in _ref1) {
        v = _ref1[k];
        if (typeof v !== 'object') {
          styleAttrs[k] = v;
          hasStyles = true;
        }
      }
      if (hasStyles) {
        if ((_ref2 = (_base = log.jsoncss)[selector]) == null) {
          _base[selector] = {};
        }
        return Froth.merge(log.jsoncss[selector], styleAttrs);
      }
    };
    log = {
      jsoncss: {}
    };
    Froth.df_walk(frothJson, getChildNodes, visitNode, log);
    return log.jsoncss;
  };

  Froth.merge = function() {
    var dest, k, obj, objs, v, _i, _len;
    dest = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      for (k in obj) {
        v = obj[k];
        dest[k] = v;
      }
    }
    return dest;
  };

  /*
  Froth actions.
  */


  Froth.getStylesheet = function(stylesheetId) {
    var _base, _ref;
    if (stylesheetId == null) {
      stylesheetId = Froth.defaultStylesheetId;
    }
    if ((_ref = (_base = Froth.stylesheets)[stylesheetId]) == null) {
      _base[stylesheetId] = new Froth.Stylesheet(stylesheetId);
    }
    return Froth.stylesheets[stylesheetId];
  };

  Froth._set_update_common = function(rules, stylesheetId) {
    var jsoncss, stylesheet;
    stylesheet = Froth.getStylesheet(stylesheetId);
    jsoncss = Froth.frothJsonToJsonCss(rules);
    return [stylesheet, jsoncss];
  };

  Froth.set = function(rules, stylesheetId) {
    var jsoncss, selector, styles, stylesheet, _ref, _results;
    _ref = Froth._set_update_common(rules, stylesheetId), stylesheet = _ref[0], jsoncss = _ref[1];
    _results = [];
    for (selector in jsoncss) {
      styles = jsoncss[selector];
      _results.push(stylesheet.rules[selector] = styles);
    }
    return _results;
  };

  Froth.update = function(rules, stylesheetId) {
    var jsoncss, selector, styles, stylesheet, _ref, _results;
    _ref = Froth._set_update_common(rules, stylesheetId), stylesheet = _ref[0], jsoncss = _ref[1];
    _results = [];
    for (selector in jsoncss) {
      styles = jsoncss[selector];
      _results.push(Froth.merge(stylesheet.rules[selector], styles));
    }
    return _results;
  };

  Froth["delete"] = function() {
    return console.log('delete');
  };

  Froth.reset = function() {
    return Froth.stylesheets = {};
  };

}).call(this);
